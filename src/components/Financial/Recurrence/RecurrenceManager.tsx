import React, { useState, useEffect } from 'react';
import { 
  Revenue, 
  Expense, 
  RecurrenceConfig, 
  RecurrencePeriod, 
  TransactionStatus,
  FinancialNotification 
} from '../../../types/financial';

interface RecurrentTransaction {
  id: string;
  type: 'revenue' | 'expense';
  description: string;
  amount: number;
  categoryId: string;
  paymentMethodId: string;
  bankAccountId?: string;
  recurrence: RecurrenceConfig;
  status: 'active' | 'paused' | 'completed';
  nextDueDate: Date;
  lastGeneratedDate?: Date;
  totalGenerated: number;
  createdAt: Date;
  createdBy: string;
}

interface PendingRecurrence {
  id: string;
  transactionId: string;
  description: string;
  amount: number;
  type: 'revenue' | 'expense';
  scheduledDate: Date;
  status: 'pending_confirmation' | 'confirmed' | 'skipped';
  autoGenerated: boolean;
}

const RecurrenceManager: React.FC = () => {
  const [recurrentTransactions, setRecurrentTransactions] = useState<RecurrentTransaction[]>([]);
  const [pendingRecurrences, setPendingRecurrences] = useState<PendingRecurrence[]>([]);
  const [notifications, setNotifications] = useState<FinancialNotification[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedTransaction, setSelectedTransaction] = useState<RecurrentTransaction | null>(null);
  const [filter, setFilter] = useState<'all' | 'revenue' | 'expense'>('all');
  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'paused' | 'completed'>('all');

  // Mock data
  useEffect(() => {
    setRecurrentTransactions([
      {
        id: '1',
        type: 'expense',
        description: 'Aluguel do escritório',
        amount: 3500,
        categoryId: '1',
        paymentMethodId: '1',
        bankAccountId: '1',
        recurrence: {
          isRecurrent: true,
          period: 'monthly',
          interval: 1,
          nextDueDate: new Date('2024-02-01')
        },
        status: 'active',
        nextDueDate: new Date('2024-02-01'),
        lastGeneratedDate: new Date('2024-01-01'),
        totalGenerated: 12,
        createdAt: new Date('2023-01-01'),
        createdBy: 'admin'
      },
      {
        id: '2',
        type: 'revenue',
        description: 'Assinatura mensal - Cliente Premium',
        amount: 1200,
        categoryId: '2',
        paymentMethodId: '2',
        recurrence: {
          isRecurrent: true,
          period: 'monthly',
          interval: 1,
          nextDueDate: new Date('2024-01-25')
        },
        status: 'active',
        nextDueDate: new Date('2024-01-25'),
        lastGeneratedDate: new Date('2023-12-25'),
        totalGenerated: 8,
        createdAt: new Date('2023-05-01'),
        createdBy: 'admin'
      }
    ]);

    setPendingRecurrences([
      {
        id: '1',
        transactionId: '1',
        description: 'Aluguel do escritório - Fevereiro 2024',
        amount: 3500,
        type: 'expense',
        scheduledDate: new Date('2024-02-01'),
        status: 'pending_confirmation',
        autoGenerated: true
      },
      {
        id: '2',
        transactionId: '2',
        description: 'Assinatura mensal - Cliente Premium - Janeiro 2024',
        amount: 1200,
        type: 'revenue',
        scheduledDate: new Date('2024-01-25'),
        status: 'pending_confirmation',
        autoGenerated: true
      }
    ]);

    setNotifications([
      {
        id: '1',
        type: 'recurrence_confirmation',
        title: 'Confirmação de Recorrência',
        message: 'Há 2 transações recorrentes aguardando confirmação',
        entityType: 'expense',
        entityId: '1',
        isRead: false,
        priority: 'medium',
        actionRequired: true,
        dueDate: new Date('2024-02-01'),
        createdAt: new Date(),
        updatedAt: new Date(),
        createdBy: 'system',
        updatedBy: 'system'
      }
    ]);
  }, []);

  const handleConfirmRecurrence = (pendingId: string) => {
    setPendingRecurrences(prev => 
      prev.map(pending => 
        pending.id === pendingId 
          ? { ...pending, status: 'confirmed' }
          : pending
      )
    );
    
    // Aqui seria criada a transação real (Revenue ou Expense)
    console.log('Transação recorrente confirmada:', pendingId);
  };

  const handleSkipRecurrence = (pendingId: string) => {
    setPendingRecurrences(prev => 
      prev.map(pending => 
        pending.id === pendingId 
          ? { ...pending, status: 'skipped' }
          : pending
      )
    );
  };

  const handlePauseRecurrence = (transactionId: string) => {
    setRecurrentTransactions(prev => 
      prev.map(transaction => 
        transaction.id === transactionId 
          ? { ...transaction, status: 'paused' }
          : transaction
      )
    );
  };

  const handleResumeRecurrence = (transactionId: string) => {
    setRecurrentTransactions(prev => 
      prev.map(transaction => 
        transaction.id === transactionId 
          ? { ...transaction, status: 'active' }
          : transaction
      )
    );
  };

  const handleEditRecurrence = (transaction: RecurrentTransaction) => {
    setSelectedTransaction(transaction);
    setIsModalOpen(true);
  };

  const calculateNextDueDate = (lastDate: Date, period: RecurrencePeriod, interval: number = 1): Date => {
    const nextDate = new Date(lastDate);
    
    switch (period) {
      case 'daily':
        nextDate.setDate(nextDate.getDate() + interval);
        break;
      case 'weekly':
        nextDate.setDate(nextDate.getDate() + (7 * interval));
        break;
      case 'biweekly':
        nextDate.setDate(nextDate.getDate() + (14 * interval));
        break;
      case 'monthly':
        nextDate.setMonth(nextDate.getMonth() + interval);
        break;
      case 'quarterly':
        nextDate.setMonth(nextDate.getMonth() + (3 * interval));
        break;
      case 'semiannual':
        nextDate.setMonth(nextDate.getMonth() + (6 * interval));
        break;
      case 'annual':
        nextDate.setFullYear(nextDate.getFullYear() + interval);
        break;
    }
    
    return nextDate;
  };

  const getPeriodText = (period: RecurrencePeriod): string => {
    const periods = {
      daily: 'Diário',
      weekly: 'Semanal',
      biweekly: 'Quinzenal',
      monthly: 'Mensal',
      quarterly: 'Trimestral',
      semiannual: 'Semestral',
      annual: 'Anual'
    };
    return periods[period];
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'text-green-600 bg-green-100';
      case 'paused': return 'text-yellow-600 bg-yellow-100';
      case 'completed': return 'text-gray-600 bg-gray-100';
      case 'pending_confirmation': return 'text-blue-600 bg-blue-100';
      case 'confirmed': return 'text-green-600 bg-green-100';
      case 'skipped': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'active': return 'Ativo';
      case 'paused': return 'Pausado';
      case 'completed': return 'Concluído';
      case 'pending_confirmation': return 'Aguardando Confirmação';
      case 'confirmed': return 'Confirmado';
      case 'skipped': return 'Pulado';
      default: return status;
    }
  };

  const filteredTransactions = recurrentTransactions.filter(transaction => {
    const matchesType = filter === 'all' || transaction.type === filter;
    const matchesStatus = statusFilter === 'all' || transaction.status === statusFilter;
    return matchesType && matchesStatus;
  });

  const filteredPendingRecurrences = pendingRecurrences.filter(pending => 
    pending.status === 'pending_confirmation'
  );

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-800">Sistema de Recorrência</h2>
        <div className="flex gap-2">
          <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
            {filteredPendingRecurrences.length} pendentes
          </span>
          <span className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm">
            {recurrentTransactions.filter(t => t.status === 'active').length} ativas
          </span>
        </div>
      </div>

      {/* Notificações */}
      {notifications.filter(n => !n.isRead).length > 0 && (
        <div className="mb-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <h3 className="text-lg font-medium text-yellow-800 mb-2">Notificações</h3>
          {notifications.filter(n => !n.isRead).map(notification => (
            <div key={notification.id} className="flex items-center justify-between py-2">
              <div>
                <p className="text-yellow-800 font-medium">{notification.title}</p>
                <p className="text-yellow-600 text-sm">{notification.message}</p>
              </div>
              <button
                onClick={() => setNotifications(prev => 
                  prev.map(n => n.id === notification.id ? { ...n, isRead: true } : n)
                )}
                className="text-yellow-600 hover:text-yellow-800"
              >
                Marcar como lida
              </button>
            </div>
          ))}
        </div>
      )}

      {/* Recorrências Pendentes */}
      {filteredPendingRecurrences.length > 0 && (
        <div className="mb-6">
          <h3 className="text-lg font-medium text-gray-800 mb-4">Confirmações Pendentes</h3>
          <div className="bg-white rounded-lg shadow overflow-hidden">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Descrição
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Tipo
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Valor
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Data Programada
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Ações
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredPendingRecurrences.map((pending) => (
                  <tr key={pending.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900">{pending.description}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        pending.type === 'revenue' ? 'text-green-600 bg-green-100' : 'text-red-600 bg-red-100'
                      }`}>
                        {pending.type === 'revenue' ? 'Receita' : 'Despesa'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      R$ {pending.amount.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {pending.scheduledDate.toLocaleDateString('pt-BR')}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <button
                        onClick={() => handleConfirmRecurrence(pending.id)}
                        className="text-green-600 hover:text-green-900 mr-3"
                      >
                        Confirmar
                      </button>
                      <button
                        onClick={() => handleSkipRecurrence(pending.id)}
                        className="text-red-600 hover:text-red-900"
                      >
                        Pular
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {/* Filtros */}
      <div className="mb-6 flex gap-4">
        <select
          value={filter}
          onChange={(e) => setFilter(e.target.value as 'all' | 'revenue' | 'expense')}
          className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        >
          <option value="all">Todos os Tipos</option>
          <option value="revenue">Receitas</option>
          <option value="expense">Despesas</option>
        </select>
        <select
          value={statusFilter}
          onChange={(e) => setStatusFilter(e.target.value as 'all' | 'active' | 'paused' | 'completed')}
          className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        >
          <option value="all">Todos os Status</option>
          <option value="active">Ativo</option>
          <option value="paused">Pausado</option>
          <option value="completed">Concluído</option>
        </select>
      </div>

      {/* Lista de Transações Recorrentes */}
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Descrição
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Tipo
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Valor
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Periodicidade
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Próximo Vencimento
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Ações
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {filteredTransactions.map((transaction) => (
              <tr key={transaction.id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm font-medium text-gray-900">{transaction.description}</div>
                  <div className="text-sm text-gray-500">Geradas: {transaction.totalGenerated}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                    transaction.type === 'revenue' ? 'text-green-600 bg-green-100' : 'text-red-600 bg-red-100'
                  }`}>
                    {transaction.type === 'revenue' ? 'Receita' : 'Despesa'}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  R$ {transaction.amount.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {getPeriodText(transaction.recurrence.period!)}
                  {transaction.recurrence.interval && transaction.recurrence.interval > 1 && 
                    ` (${transaction.recurrence.interval}x)`
                  }
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {transaction.nextDueDate.toLocaleDateString('pt-BR')}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(transaction.status)}`}>
                    {getStatusText(transaction.status)}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <button
                    onClick={() => handleEditRecurrence(transaction)}
                    className="text-indigo-600 hover:text-indigo-900 mr-3"
                  >
                    Editar
                  </button>
                  {transaction.status === 'active' ? (
                    <button
                      onClick={() => handlePauseRecurrence(transaction.id)}
                      className="text-yellow-600 hover:text-yellow-900"
                    >
                      Pausar
                    </button>
                  ) : transaction.status === 'paused' ? (
                    <button
                      onClick={() => handleResumeRecurrence(transaction.id)}
                      className="text-green-600 hover:text-green-900"
                    >
                      Retomar
                    </button>
                  ) : null}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default RecurrenceManager;