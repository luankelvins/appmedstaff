import React, { useState, useEffect } from 'react';
import { Card } from '@/components/UI/Card';
import { Button } from '@/components/UI/Button';
import { Badge } from '@/components/UI/Badge';
import {
  Users,
  Building2,
  Clock,
  Calendar,
  BarChart3,
  Settings,
  Plus,
  Edit,
  Trash2,
  Search,
  Filter,
  Download,
  Upload,
  TrendingUp,
  UserPlus,
  FileText,
  AlertCircle
} from 'lucide-react';
import { useAdminPermissions } from '@/hooks/useAdminPermissions';
import { internalTeamService, InternalTeamMember, Department as InternalDepartment } from '@/services/internalTeamService';
import { InternalTeamSection } from '@/components/Admin/InternalTeamSection';
import TimeClockWidget from '@/components/TimeTracking/TimeClockWidget';
import WorkScheduleManagement from './WorkScheduleManagement';

// Interfaces temporárias - serão implementadas posteriormente
interface Employee {
  id: string;
  name: string;
  email: string;
  role: string;
  department: string;
  status: 'active' | 'inactive';
  hireDate: Date;
}

interface Department {
  id: string;
  name: string;
  code: string;
  description: string;
  managerId?: string;
  managerName?: string;
  location: string;
  phone: string;
  email: string;
  budget: number;
  costCenter: string;
  status: 'active' | 'inactive';
  employees: Employee[];
  createdAt: Date;
  updatedAt: Date;
}

type AdminView = 
  | 'dashboard' 
  | 'employees' 
  | 'departments' 
  | 'timetracking' 
  | 'schedules'
  | 'internal-team'
  | 'employee-form'
  | 'department-form';

export const AdminDashboard: React.FC = () => {
  const [currentView, setCurrentView] = useState<AdminView>('dashboard');
  const [selectedEmployee, setSelectedEmployee] = useState<Employee | undefined>();
  const [selectedDepartment, setSelectedDepartment] = useState<Department | undefined>();
  const [searchTerm, setSearchTerm] = useState('');
  const [teamMembers, setTeamMembers] = useState<InternalTeamMember[]>([]);
  const [internalDepartments, setInternalDepartments] = useState<InternalDepartment[]>([]);
  const [loading, setLoading] = useState(true);
  
  // Estados para formulário de funcionário
  const [employeeFormData, setEmployeeFormData] = useState({
    name: '',
    email: '',
    role: '',
    department: '',
    status: 'active' as const,
    hireDate: ''
  });
  const [employeeFormErrors, setEmployeeFormErrors] = useState<Record<string, string>>({});
  const [isEmployeeSubmitting, setIsEmployeeSubmitting] = useState(false);
  
  // Estados para formulário de departamento
  const [departmentFormData, setDepartmentFormData] = useState({
    name: '',
    code: '',
    description: '',
    location: '',
    phone: '',
    email: '',
    budget: '',
    costCenter: '',
    status: 'active' as const,
    managerId: '',
    managerName: ''
  });
  const [departmentFormErrors, setDepartmentFormErrors] = useState<Record<string, string>>({});
  const [isDepartmentSubmitting, setIsDepartmentSubmitting] = useState(false);
  
  const permissions = useAdminPermissions();
  
  // Verificar se o usuário tem acesso ao painel administrativo
  if (!permissions.canAccessAdmin) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-gray-900 mb-2">Acesso Negado</h3>
          <p className="text-gray-600">Você não tem permissão para acessar o painel administrativo.</p>
        </div>
      </div>
    )
  }
  
  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true)
        const [membersData, departmentsData] = await Promise.all([
          internalTeamService.getInternalTeamMembers(),
          internalTeamService.getDepartments()
        ])
        setTeamMembers(membersData)
         setInternalDepartments(departmentsData)
      } catch (error) {
        console.error('Erro ao carregar dados:', error)
      } finally {
        setLoading(false)
      }
    }
    
    loadData()
  }, [])

  // Inicializar dados do formulário de funcionário quando selectedEmployee mudar
  useEffect(() => {
    if (selectedEmployee) {
      setEmployeeFormData({
        name: selectedEmployee.name || '',
        email: selectedEmployee.email || '',
        role: selectedEmployee.role || '',
        department: selectedEmployee.department || '',
        status: selectedEmployee.status || 'active' as const,
        hireDate: selectedEmployee.hireDate ? selectedEmployee.hireDate.toISOString().split('T')[0] : ''
      });
    } else {
      setEmployeeFormData({
        name: '',
        email: '',
        role: '',
        department: '',
        status: 'active',
        hireDate: ''
      });
    }
    setEmployeeFormErrors({});
  }, [selectedEmployee]);

  // Inicializar dados do formulário de departamento quando selectedDepartment mudar
  useEffect(() => {
    if (selectedDepartment) {
      setDepartmentFormData({
        name: selectedDepartment.name || '',
        code: selectedDepartment.code || '',
        description: selectedDepartment.description || '',
        location: selectedDepartment.location || '',
        phone: selectedDepartment.phone || '',
        email: selectedDepartment.email || '',
        budget: selectedDepartment.budget?.toString() || '',
        costCenter: selectedDepartment.costCenter || '',
        status: selectedDepartment.status || 'active' as const,
        managerId: selectedDepartment.managerId || '',
        managerName: selectedDepartment.managerName || ''
      });
    } else {
      setDepartmentFormData({
        name: '',
        code: '',
        description: '',
        location: '',
        phone: '',
        email: '',
        budget: '',
        costCenter: '',
        status: 'active',
        managerId: '',
        managerName: ''
      });
    }
    setDepartmentFormErrors({});
  }, [selectedDepartment]);

  // Mock data
  const [employees, setEmployees] = useState<Employee[]>([
    {
      id: '1',
      name: 'João Silva',
      email: 'joao.silva@empresa.com',
      role: 'Desenvolvedor',
      department: 'TI',
      status: 'active',
      hireDate: new Date('2023-01-15')
    },
    {
      id: '2',
      name: 'Maria Santos',
      email: 'maria.santos@empresa.com',
      role: 'Analista RH',
      department: 'RH',
      status: 'active',
      hireDate: new Date('2022-08-20')
    },
    {
      id: '3',
      name: 'Pedro Costa',
      email: 'pedro.costa@empresa.com',
      role: 'Gerente',
      department: 'Vendas',
      status: 'active',
      hireDate: new Date('2021-03-10')
    }
  ]);

  const [departments, setDepartments] = useState<Department[]>([
    {
      id: '1',
      name: 'Tecnologia da Informação',
      code: 'TI',
      description: 'Desenvolvimento e manutenção de sistemas',
      managerId: '1',
      managerName: 'João Silva',
      location: 'Prédio A - 3º Andar',
      phone: '(11) 99999-9999',
      email: 'ti@empresa.com',
      budget: 500000,
      costCenter: 'CC001',
      status: 'active',
      employees: [employees[0]],
      createdAt: new Date('2023-01-01'),
      updatedAt: new Date('2023-01-01')
    },
    {
      id: '2',
      name: 'Recursos Humanos',
      code: 'RH',
      description: 'Gestão de pessoas e processos administrativos',
      managerId: '2',
      managerName: 'Maria Santos',
      location: 'Prédio B - 1º Andar',
      phone: '(11) 88888-8888',
      email: 'rh@empresa.com',
      budget: 300000,
      costCenter: 'CC002',
      status: 'active',
      employees: [employees[1]],
      createdAt: new Date('2023-01-01'),
      updatedAt: new Date('2023-01-01')
    }
  ]);

  const handleSaveEmployee = (employee: any) => {
    // Funcionalidade em desenvolvimento
    console.log('Salvando membro do time interno:', employee);
    setCurrentView('employees');
    setSelectedEmployee(undefined);
  };

  const handleSaveDepartment = (department: any) => {
    // Funcionalidade em desenvolvimento
    console.log('Salvando departamento:', department);
    setCurrentView('departments');
    setSelectedDepartment(undefined);
  };

  const handleEditEmployee = (employee: Employee) => {
    setSelectedEmployee(employee);
    setCurrentView('employee-form');
  };

  const handleEditDepartment = (department: Department) => {
    setSelectedDepartment(department);
    setCurrentView('department-form');
  };

  const handleDeleteEmployee = (employeeId: string) => {
    if (confirm('Tem certeza que deseja excluir este membro do time interno?')) {
      setEmployees(prev => prev.filter(emp => emp.id !== employeeId));
    }
  };

  const handleDeleteDepartment = (departmentId: string) => {
    if (confirm('Tem certeza que deseja excluir este departamento?')) {
      setDepartments(prev => prev.filter(dept => dept.id !== departmentId));
    }
  };

  const filteredEmployees = employees.filter(emp =>
    emp.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    emp.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
    emp.role.toLowerCase().includes(searchTerm.toLowerCase()) ||
    emp.department.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const filteredDepartments = departments.filter(dept =>
    dept.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    dept.code.toLowerCase().includes(searchTerm.toLowerCase()) ||
    dept.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const renderNavigation = () => (
    <div className="bg-white shadow-sm border-b">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center py-4">
          <h1 className="text-2xl font-bold text-gray-900">Administração</h1>
          <div className="flex space-x-4">
            <Button
              variant={currentView === 'dashboard' ? 'default' : 'outline'}
              onClick={() => setCurrentView('dashboard')}
              className="flex items-center gap-2"
            >
              <BarChart3 className="h-4 w-4" />
              Dashboard
            </Button>
            {permissions.canViewEmployees && (
              <Button
                variant={currentView === 'employees' || currentView === 'employee-form' ? 'default' : 'outline'}
                onClick={() => setCurrentView('employees')}
                className="flex items-center gap-2"
              >
                <Users className="h-4 w-4" />
                Time Interno
              </Button>
            )}
            {permissions.canViewDepartments && (
              <Button
                variant={currentView === 'departments' || currentView === 'department-form' ? 'default' : 'outline'}
                onClick={() => setCurrentView('departments')}
                className="flex items-center gap-2"
              >
                <Building2 className="h-4 w-4" />
                Departamentos
              </Button>
            )}
            {permissions.canViewReports && (
              <Button
                variant={currentView === 'timetracking' ? 'default' : 'outline'}
                onClick={() => setCurrentView('timetracking')}
                className="flex items-center gap-2"
              >
                <Clock className="h-4 w-4" />
                Controle de Ponto
              </Button>
            )}
            {permissions.canViewReports && (
              <Button
                variant={currentView === 'schedules' ? 'default' : 'outline'}
                onClick={() => setCurrentView('schedules')}
                className="flex items-center gap-2"
              >
                <Calendar className="h-4 w-4" />
                Horários
              </Button>
            )}


          </div>
        </div>
      </div>
    </div>
  );

  const renderDashboard = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card className="p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Total do Time Interno</p>
              <p className="text-3xl font-bold text-gray-900">{employees.length}</p>
            </div>
            <Users className="h-8 w-8 text-blue-500" />
          </div>
        </Card>

        <Card className="p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Departamentos</p>
              <p className="text-3xl font-bold text-gray-900">{internalDepartments.length}</p>
            </div>
            <Building2 className="h-8 w-8 text-green-500" />
          </div>
        </Card>

        <Card className="p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Time Interno Ativo</p>
              <p className="text-3xl font-bold text-gray-900">
                {employees.filter(emp => emp.status === 'active').length}
              </p>
            </div>
            <Clock className="h-8 w-8 text-orange-500" />
          </div>
        </Card>

        <Card className="p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Departamentos Ativos</p>
              <p className="text-3xl font-bold text-gray-900">
                {departments.filter(dept => dept.status === 'active').length}
              </p>
            </div>
            <Calendar className="h-8 w-8 text-purple-500" />
          </div>
        </Card>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="p-6">
          <h3 className="text-lg font-semibold mb-4">Time Interno Recente</h3>
          <div className="space-y-3">
            {employees.slice(0, 5).map(employee => (
              <div key={employee.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div>
                  <p className="font-medium">{employee.name}</p>
                  <p className="text-sm text-gray-500">{employee.role} - {employee.department}</p>
                </div>
                <Badge variant={employee.status === 'active' ? 'default' : 'secondary'}>
                  {employee.status === 'active' ? 'Ativo' : 'Inativo'}
                </Badge>
              </div>
            ))}
          </div>
        </Card>

        <Card className="p-6">
          <h3 className="text-lg font-semibold mb-4">Departamentos</h3>
          <div className="space-y-3">
            {departments.map(department => (
              <div key={department.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div>
                  <p className="font-medium">{department.name}</p>
                  <p className="text-sm text-gray-500">{department.employees.length} membros</p>
                </div>
                <Badge variant={department.status === 'active' ? 'default' : 'secondary'}>
                  {department.status === 'active' ? 'Ativo' : 'Inativo'}
                </Badge>
              </div>
            ))}
          </div>
        </Card>
      </div>
    </div>
  );

  const renderEmployees = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold">Gestão do Time Interno</h2>
        {permissions.canCreateEmployees && (
          <Button
            onClick={() => {
              setSelectedEmployee(undefined);
              setCurrentView('employee-form');
            }}
            className="flex items-center gap-2"
          >
            <Plus className="h-4 w-4" />
            Novo Membro
          </Button>
        )}
      </div>

      <div className="flex gap-4 items-center">
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
          <input
            type="text"
            placeholder="Buscar membros do time interno..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
        <Button variant="outline" className="flex items-center gap-2">
          <Filter className="h-4 w-4" />
          Filtros
        </Button>
        <Button variant="outline" className="flex items-center gap-2">
          <Download className="h-4 w-4" />
          Exportar
        </Button>
      </div>

      <Card className="overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Membro
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Cargo
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Departamento
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Data de Admissão
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Ações
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredEmployees.map(employee => (
                <tr key={employee.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div>
                      <div className="text-sm font-medium text-gray-900">{employee.name}</div>
                      <div className="text-sm text-gray-500">{employee.email}</div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {employee.role}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {employee.department}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <Badge variant={employee.status === 'active' ? 'default' : 'secondary'}>
                      {employee.status === 'active' ? 'Ativo' : 'Inativo'}
                    </Badge>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {employee.hireDate.toLocaleDateString('pt-BR')}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div className="flex justify-end gap-2">
                      {permissions.canEditEmployees && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleEditEmployee(employee)}
                        >
                          <Edit className="h-4 w-4" />
                        </Button>
                      )}
                      {permissions.canDeleteEmployees && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleDeleteEmployee(employee.id)}
                          className="text-red-600 hover:text-red-800"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </Card>
    </div>
  );

  const renderDepartments = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold">Gestão de Departamentos</h2>
        {permissions.canCreateDepartments && (
          <Button
            onClick={() => {
              setSelectedDepartment(undefined);
              setCurrentView('department-form');
            }}
            className="flex items-center gap-2"
          >
            <Plus className="h-4 w-4" />
            Novo Departamento
          </Button>
        )}
      </div>

      <div className="flex gap-4 items-center">
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
          <input
            type="text"
            placeholder="Buscar departamentos..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
        <Button variant="outline" className="flex items-center gap-2">
          <Filter className="h-4 w-4" />
          Filtros
        </Button>
        <Button variant="outline" className="flex items-center gap-2">
          <Download className="h-4 w-4" />
          Exportar
        </Button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredDepartments.map(department => (
          <Card key={department.id} className="p-6">
            <div className="flex justify-between items-start mb-4">
              <div>
                <h3 className="text-lg font-semibold">{department.name}</h3>
                <p className="text-sm text-gray-500">{department.code}</p>
              </div>
              <Badge variant={department.status === 'active' ? 'default' : 'secondary'}>
                {department.status === 'active' ? 'Ativo' : 'Inativo'}
              </Badge>
            </div>
            
            <p className="text-sm text-gray-600 mb-4">{department.description}</p>
            
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-500">Membros:</span>
                <span className="font-medium">{department.employees.length}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-500">Localização:</span>
                <span className="font-medium">{department.location}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-500">Gerente:</span>
                <span className="font-medium">{department.managerName || 'Não definido'}</span>
              </div>
            </div>
            
            <div className="flex justify-end gap-2 mt-4 pt-4 border-t">
              {permissions.canEditDepartments && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleEditDepartment(department)}
                >
                  <Edit className="h-4 w-4" />
                </Button>
              )}
              {permissions.canDeleteDepartments && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleDeleteDepartment(department.id)}
                  className="text-red-600 hover:text-red-800"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              )}
            </div>
          </Card>
        ))}
      </div>
    </div>
  );

  const validateEmployeeForm = () => {
    const newErrors: Record<string, string> = {};

    if (!employeeFormData.name.trim()) {
      newErrors.name = 'Nome é obrigatório';
    }

    if (!employeeFormData.email.trim()) {
      newErrors.email = 'Email é obrigatório';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(employeeFormData.email)) {
      newErrors.email = 'Email inválido';
    }

    if (!employeeFormData.role.trim()) {
      newErrors.role = 'Cargo é obrigatório';
    }

    if (!employeeFormData.department.trim()) {
      newErrors.department = 'Departamento é obrigatório';
    }

    if (!employeeFormData.hireDate) {
      newErrors.hireDate = 'Data de contratação é obrigatória';
    }

    setEmployeeFormErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleEmployeeSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateEmployeeForm()) {
      return;
    }

    setIsEmployeeSubmitting(true);

    try {
      const employeeData: Employee = {
        id: selectedEmployee?.id || `emp_${Date.now()}`,
        name: employeeFormData.name.trim(),
        email: employeeFormData.email.trim(),
        role: employeeFormData.role.trim(),
        department: employeeFormData.department.trim(),
        status: employeeFormData.status,
        hireDate: new Date(employeeFormData.hireDate)
      };

      if (selectedEmployee) {
        // Editar funcionário existente
        setEmployees(prev => prev.map(emp => 
          emp.id === selectedEmployee.id ? employeeData : emp
        ));
      } else {
        // Criar novo funcionário
        setEmployees(prev => [...prev, employeeData]);
      }

      setCurrentView('employees');
      setSelectedEmployee(undefined);
    } catch (error) {
      console.error('Erro ao salvar funcionário:', error);
    } finally {
      setIsEmployeeSubmitting(false);
    }
  };

  const renderEmployeeForm = () => {
    const validateForm = validateEmployeeForm;
      }

      if (!formData.department.trim()) {
        newErrors.department = 'Departamento é obrigatório';
      }

      if (!formData.hireDate) {
        newErrors.hireDate = 'Data de admissão é obrigatória';
      }

      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = async (e: React.FormEvent) => {
      e.preventDefault();
      
      if (!validateForm()) {
        return;
      }

      setIsSubmitting(true);

      try {
        const employeeData: Employee = {
          id: selectedEmployee?.id || `emp_${Date.now()}`,
          name: formData.name.trim(),
          email: formData.email.trim(),
          role: formData.role.trim(),
          department: formData.department.trim(),
          status: formData.status,
          hireDate: new Date(formData.hireDate)
        };

        if (selectedEmployee) {
          // Editar membro existente
          setEmployees(prev => prev.map(emp => 
            emp.id === selectedEmployee.id ? employeeData : emp
          ));
        } else {
          // Criar novo membro
          setEmployees(prev => [...prev, employeeData]);
        }

        setCurrentView('employees');
        setSelectedEmployee(undefined);
      } catch (error) {
        console.error('Erro ao salvar membro do time interno:', error);
      } finally {
        setIsSubmitting(false);
      }
    };

    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h2 className="text-2xl font-bold">
            {selectedEmployee ? 'Editar Membro do Time Interno' : 'Novo Membro do Time Interno'}
          </h2>
          <Button
            variant="outline"
            onClick={() => {
              setCurrentView('employees');
              setSelectedEmployee(undefined);
            }}
          >
            Cancelar
          </Button>
        </div>

        <Card className="p-6">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Nome Completo *
                </label>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.name ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Digite o nome completo"
                />
                {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Email *
                </label>
                <input
                  type="email"
                  value={formData.email}
                  onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.email ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Digite o email"
                />
                {errors.email && <p className="text-red-500 text-sm mt-1">{errors.email}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Cargo *
                </label>
                <input
                  type="text"
                  value={formData.role}
                  onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value }))}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.role ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Digite o cargo"
                />
                {errors.role && <p className="text-red-500 text-sm mt-1">{errors.role}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Departamento *
                </label>
                <select
                  value={formData.department}
                  onChange={(e) => setFormData(prev => ({ ...prev, department: e.target.value }))}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.department ? 'border-red-500' : 'border-gray-300'
                  }`}
                >
                  <option value="">Selecione um departamento</option>
                  {departments.map(dept => (
                    <option key={dept.id} value={dept.name}>
                      {dept.name}
                    </option>
                  ))}
                </select>
                {errors.department && <p className="text-red-500 text-sm mt-1">{errors.department}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Status
                </label>
                <select
                  value={formData.status}
                  onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value as 'active' | 'inactive' }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="active">Ativo</option>
                  <option value="inactive">Inativo</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Data de Admissão *
                </label>
                <input
                  type="date"
                  value={formData.hireDate}
                  onChange={(e) => setFormData(prev => ({ ...prev, hireDate: e.target.value }))}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.hireDate ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors.hireDate && <p className="text-red-500 text-sm mt-1">{errors.hireDate}</p>}
              </div>
            </div>

            <div className="flex justify-end gap-4 pt-6 border-t">
              <Button
                type="button"
                variant="outline"
                onClick={() => {
                  setCurrentView('employees');
                  setSelectedEmployee(undefined);
                }}
              >
                Cancelar
              </Button>
              <Button
                type="submit"
                disabled={isSubmitting}
                className="flex items-center gap-2"
              >
                {isSubmitting ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    Salvando...
                  </>
                ) : (
                  <>
                    {selectedEmployee ? 'Atualizar' : 'Criar'} Membro
                  </>
                )}
              </Button>
            </div>
          </form>
        </Card>
      </div>
    );
  };

  const renderDepartmentForm = () => {
    const [formData, setFormData] = useState({
      name: selectedDepartment?.name || '',
      code: selectedDepartment?.code || '',
      description: selectedDepartment?.description || '',
      location: selectedDepartment?.location || '',
      phone: selectedDepartment?.phone || '',
      email: selectedDepartment?.email || '',
      budget: selectedDepartment?.budget?.toString() || '',
      costCenter: selectedDepartment?.costCenter || '',
      status: selectedDepartment?.status || 'active' as const,
      managerId: selectedDepartment?.managerId || '',
      managerName: selectedDepartment?.managerName || ''
    });

    const [errors, setErrors] = useState<Record<string, string>>({});
    const [isSubmitting, setIsSubmitting] = useState(false);

    const validateForm = () => {
      const newErrors: Record<string, string> = {};

      if (!formData.name.trim()) {
        newErrors.name = 'Nome é obrigatório';
      }

      if (!formData.code.trim()) {
        newErrors.code = 'Código é obrigatório';
      }

      if (!formData.description.trim()) {
        newErrors.description = 'Descrição é obrigatória';
      }

      if (!formData.location.trim()) {
        newErrors.location = 'Localização é obrigatória';
      }

      if (!formData.email.trim()) {
        newErrors.email = 'Email é obrigatório';
      } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
        newErrors.email = 'Email inválido';
      }

      if (!formData.costCenter.trim()) {
        newErrors.costCenter = 'Centro de custo é obrigatório';
      }

      if (formData.budget && isNaN(Number(formData.budget))) {
        newErrors.budget = 'Orçamento deve ser um número válido';
      }

      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = async (e: React.FormEvent) => {
      e.preventDefault();
      
      if (!validateForm()) {
        return;
      }

      setIsSubmitting(true);

      try {
        const departmentData: Department = {
          id: selectedDepartment?.id || `dept_${Date.now()}`,
          name: formData.name.trim(),
          code: formData.code.trim(),
          description: formData.description.trim(),
          location: formData.location.trim(),
          phone: formData.phone.trim(),
          email: formData.email.trim(),
          budget: Number(formData.budget) || 0,
          costCenter: formData.costCenter.trim(),
          status: formData.status,
          managerId: formData.managerId || undefined,
          managerName: formData.managerName || undefined,
          employees: selectedDepartment?.employees || [],
          createdAt: selectedDepartment?.createdAt || new Date(),
          updatedAt: new Date()
        };

        if (selectedDepartment) {
          // Editar departamento existente
          setDepartments(prev => prev.map(dept => 
            dept.id === selectedDepartment.id ? departmentData : dept
          ));
        } else {
          // Criar novo departamento
          setDepartments(prev => [...prev, departmentData]);
        }

        setCurrentView('departments');
        setSelectedDepartment(undefined);
      } catch (error) {
        console.error('Erro ao salvar departamento:', error);
      } finally {
        setIsSubmitting(false);
      }
    };

    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h2 className="text-2xl font-bold">
            {selectedDepartment ? 'Editar Departamento' : 'Novo Departamento'}
          </h2>
          <Button
            variant="outline"
            onClick={() => {
              setCurrentView('departments');
              setSelectedDepartment(undefined);
            }}
          >
            Cancelar
          </Button>
        </div>

        <Card className="p-6">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Nome do Departamento *
                </label>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.name ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Digite o nome do departamento"
                />
                {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Código *
                </label>
                <input
                  type="text"
                  value={formData.code}
                  onChange={(e) => setFormData(prev => ({ ...prev, code: e.target.value.toUpperCase() }))}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.code ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Digite o código (ex: TI, RH)"
                />
                {errors.code && <p className="text-red-500 text-sm mt-1">{errors.code}</p>}
              </div>

              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Descrição *
                </label>
                <textarea
                  value={formData.description}
                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                  rows={3}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.description ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Digite a descrição do departamento"
                />
                {errors.description && <p className="text-red-500 text-sm mt-1">{errors.description}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Localização *
                </label>
                <input
                  type="text"
                  value={formData.location}
                  onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.location ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Digite a localização"
                />
                {errors.location && <p className="text-red-500 text-sm mt-1">{errors.location}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Telefone
                </label>
                <input
                  type="tel"
                  value={formData.phone}
                  onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="(11) 99999-9999"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Email *
                </label>
                <input
                  type="email"
                  value={formData.email}
                  onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.email ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Digite o email do departamento"
                />
                {errors.email && <p className="text-red-500 text-sm mt-1">{errors.email}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Centro de Custo *
                </label>
                <input
                  type="text"
                  value={formData.costCenter}
                  onChange={(e) => setFormData(prev => ({ ...prev, costCenter: e.target.value }))}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.costCenter ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Digite o centro de custo"
                />
                {errors.costCenter && <p className="text-red-500 text-sm mt-1">{errors.costCenter}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Orçamento (R$)
                </label>
                <input
                  type="number"
                  value={formData.budget}
                  onChange={(e) => setFormData(prev => ({ ...prev, budget: e.target.value }))}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.budget ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="0.00"
                  min="0"
                  step="0.01"
                />
                {errors.budget && <p className="text-red-500 text-sm mt-1">{errors.budget}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Status
                </label>
                <select
                  value={formData.status}
                  onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value as 'active' | 'inactive' }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="active">Ativo</option>
                  <option value="inactive">Inativo</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Nome do Gerente
                </label>
                <input
                  type="text"
                  value={formData.managerName}
                  onChange={(e) => setFormData(prev => ({ ...prev, managerName: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Digite o nome do gerente"
                />
              </div>
            </div>

            <div className="flex justify-end gap-4 pt-6 border-t">
              <Button
                type="button"
                variant="outline"
                onClick={() => {
                  setCurrentView('departments');
                  setSelectedDepartment(undefined);
                }}
              >
                Cancelar
              </Button>
              <Button
                type="submit"
                disabled={isSubmitting}
                className="flex items-center gap-2"
              >
                {isSubmitting ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    Salvando...
                  </>
                ) : (
                  <>
                    {selectedDepartment ? 'Atualizar' : 'Criar'} Departamento
                  </>
                )}
              </Button>
            </div>
          </form>
        </Card>
      </div>
    );
  };

  const renderContent = () => {
    switch (currentView) {
      case 'dashboard':
        return renderDashboard();
      case 'employees':
        return renderEmployees();
      case 'departments':
        return renderDepartments();
      case 'timetracking':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <div>
                <h2 className="text-2xl font-bold text-gray-900">Controle de Ponto</h2>
                <p className="text-gray-600">Gerencie registros de ponto e acompanhe a jornada de trabalho</p>
              </div>
            </div>
            
            {/* Widget de Controle de Ponto */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <TimeClockWidget 
                employeeId="current-user" 
                className="lg:col-span-2"
              />
            </div>
            
            {/* Seção de Relatórios e Histórico */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <Card className="p-6">
                <div className="flex items-center gap-3 mb-4">
                  <div className="p-2 bg-blue-100 rounded-lg">
                    <Clock className="w-6 h-6 text-blue-600" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">Registros Hoje</h3>
                    <p className="text-sm text-gray-600">Entradas e saídas</p>
                  </div>
                </div>
                <div className="text-2xl font-bold text-blue-600">8</div>
                <p className="text-sm text-gray-500 mt-1">+2 desde ontem</p>
              </Card>
              
              <Card className="p-6">
                <div className="flex items-center gap-3 mb-4">
                  <div className="p-2 bg-green-100 rounded-lg">
                    <Users className="w-6 h-6 text-green-600" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">Presentes</h3>
                    <p className="text-sm text-gray-600">Funcionários ativos</p>
                  </div>
                </div>
                <div className="text-2xl font-bold text-green-600">12</div>
                <p className="text-sm text-gray-500 mt-1">de 15 total</p>
              </Card>
              
              <Card className="p-6">
                <div className="flex items-center gap-3 mb-4">
                  <div className="p-2 bg-orange-100 rounded-lg">
                    <TrendingUp className="w-6 h-6 text-orange-600" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">Horas Extras</h3>
                    <p className="text-sm text-gray-600">Esta semana</p>
                  </div>
                </div>
                <div className="text-2xl font-bold text-orange-600">24h</div>
                <p className="text-sm text-gray-500 mt-1">+6h desde semana passada</p>
              </Card>
            </div>
          </div>
        );
      case 'schedules':
        return (
          <div className="space-y-6">
            <WorkScheduleManagement />
          </div>
        );

      case 'internal-team':
        return (
          <div className="p-6">
            <h2 className="text-2xl font-bold mb-4">Time Interno</h2>
            <InternalTeamSection />
          </div>
        );
      case 'employee-form':
        return renderEmployeeForm();
      case 'department-form':
        return renderDepartmentForm();
      default:
        return renderDashboard();
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {renderNavigation()}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {renderContent()}
      </div>
    </div>
  );
};