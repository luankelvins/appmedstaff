import React, { useState, useEffect } from 'react';
import { 
  Revenue, 
  Expense, 
  RecurrenceConfig, 
  RecurrencePeriod, 
  TransactionStatus,
  FinancialNotification,
  FinancialCategory,
  BankAccount,
  PaymentMethod
} from '../../../types/financial';
import { financialService } from '../../../utils/financialService';
import { 
  X, 
  Save, 
  Trash2, 
  Calendar, 
  DollarSign, 
  Tag, 
  Building2, 
  CreditCard,
  AlertCircle 
} from 'lucide-react';

interface RecurrentTransaction {
  id: string;
  type: 'revenue' | 'expense';
  description: string;
  amount: number;
  categoryId: string;
  paymentMethodId: string;
  bankAccountId?: string;
  recurrence: RecurrenceConfig;
  status: 'active' | 'paused' | 'completed';
  nextDueDate: Date;
  lastGeneratedDate?: Date;
  totalGenerated: number;
  createdAt: Date;
  createdBy: string;
}

interface PendingRecurrence {
  id: string;
  transactionId: string;
  description: string;
  amount: number;
  type: 'revenue' | 'expense';
  scheduledDate: Date;
  status: 'pending_confirmation' | 'confirmed' | 'skipped';
  autoGenerated: boolean;
}

const RecurrenceManager: React.FC = () => {
  const [recurrentTransactions, setRecurrentTransactions] = useState<RecurrentTransaction[]>([]);
  const [pendingRecurrences, setPendingRecurrences] = useState<PendingRecurrence[]>([]);
  const [notifications, setNotifications] = useState<FinancialNotification[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedTransaction, setSelectedTransaction] = useState<RecurrentTransaction | null>(null);
  const [filter, setFilter] = useState<'all' | 'revenue' | 'expense'>('all');
  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'paused' | 'completed'>('all');
  
  // Estados para dados de formulário
  const [categories, setCategories] = useState<FinancialCategory[]>([]);
  const [bankAccounts, setBankAccounts] = useState<BankAccount[]>([]);
  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);
  const [loading, setLoading] = useState(true);
  const [loadingRecurrences, setLoadingRecurrences] = useState(false);
  const [formData, setFormData] = useState({
    description: '',
    amount: 0,
    type: 'expense' as 'revenue' | 'expense',
    categoryId: '',
    paymentMethodId: '',
    bankAccountId: '',
    period: 'monthly' as RecurrencePeriod,
    interval: 1,
    status: 'active' as 'active' | 'paused' | 'completed'
  });
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});

  // Carregar dados necessários para o formulário
  const loadFormData = async () => {
    try {
      setLoading(true);
      const [categoriesData, bankAccountsData, paymentMethodsData] = await Promise.all([
        financialService.getCategories(),
        financialService.getBankAccounts(),
        financialService.getPaymentMethods()
      ]);
      
      setCategories(categoriesData);
      setBankAccounts(bankAccountsData);
      setPaymentMethods(paymentMethodsData);
    } catch (error) {
      console.error('Erro ao carregar dados do formulário:', error);
    } finally {
      setLoading(false);
    }
  };

  // Carregar transações recorrentes
  const loadRecurrences = async () => {
    try {
      setLoadingRecurrences(true);
      const [recurrentData, pendingData] = await Promise.all([
        financialService.getRecurrentTransactions(),
        financialService.getPendingRecurrences()
      ]);
      
      setRecurrentTransactions(recurrentData);
      setPendingRecurrences(pendingData);
    } catch (error) {
      console.error('Erro ao carregar recorrências:', error);
      // Manter dados mockados em caso de erro
    } finally {
      setLoadingRecurrences(false);
    }
  };

  useEffect(() => {
    loadFormData();
    loadRecurrences();
    
    // Mock notifications - em produção, isso viria do backend
    setNotifications([
      {
        id: '1',
        type: 'recurrence_confirmation',
        title: 'Confirmação de Recorrência',
        message: 'Há transações recorrentes aguardando confirmação',
        entityType: 'expense',
        entityId: '1',
        isRead: false,
        priority: 'medium',
        actionRequired: true,
        dueDate: new Date('2024-02-01'),
        createdAt: new Date(),
        updatedAt: new Date(),
        createdBy: 'system',
        updatedBy: 'system'
      }
    ]);
  }, []);

  const handleConfirmRecurrence = async (pendingId: string) => {
    try {
      await financialService.confirmRecurrence(pendingId);
      
      // Remover da lista de pendentes
      setPendingRecurrences(prev => 
        prev.filter(p => p.id !== pendingId)
      );
      
      // Recarregar recorrências para atualizar dados
      await loadRecurrences();
      
      // Adicionar notificação de sucesso
       setNotifications(prev => [...prev, {
         id: Date.now().toString(),
         type: 'recurrence_confirmation',
         title: 'Recorrência Confirmada',
         message: 'A transação foi criada com sucesso',
         entityType: 'expense',
         entityId: pendingId,
         isRead: false,
         priority: 'medium',
         actionRequired: false,
         createdAt: new Date(),
         updatedAt: new Date(),
         createdBy: 'user',
         updatedBy: 'user'
       }]);
    } catch (error) {
      console.error('Erro ao confirmar recorrência:', error);
      alert('Erro ao confirmar recorrência. Tente novamente.');
    }
  };

  const handleSkipRecurrence = async (pendingId: string) => {
    try {
      await financialService.skipRecurrence(pendingId);
      
      // Remover da lista de pendentes
      setPendingRecurrences(prev => 
        prev.filter(p => p.id !== pendingId)
      );
      
      // Recarregar recorrências para atualizar dados
      await loadRecurrences();
      
      // Adicionar notificação
       setNotifications(prev => [...prev, {
         id: Date.now().toString(),
         type: 'recurrence_confirmation',
         title: 'Recorrência Pulada',
         message: 'A transação foi pulada para o próximo período',
         entityType: 'expense',
         entityId: pendingId,
         isRead: false,
         priority: 'low',
         actionRequired: false,
         createdAt: new Date(),
         updatedAt: new Date(),
         createdBy: 'user',
         updatedBy: 'user'
       }]);
    } catch (error) {
      console.error('Erro ao pular recorrência:', error);
      alert('Erro ao pular recorrência. Tente novamente.');
    }
  };

  const handlePauseRecurrence = async (transactionId: string) => {
    try {
      const transaction = recurrentTransactions.find(t => t.id === transactionId);
      if (!transaction) return;
      
      const updatedTransaction = await financialService.updateRecurrentTransactionStatus(
        transactionId,
        transaction.type,
        'paused'
      );
      
      setRecurrentTransactions(prev => 
        prev.map(t => 
          t.id === transactionId ? updatedTransaction : t
        )
      );
      
      // Adicionar notificação de sucesso
      setNotifications(prev => [...prev, {
        id: Date.now().toString(),
        type: 'recurrence_confirmation',
        title: 'Recorrência Pausada',
        message: 'A recorrência foi pausada com sucesso',
        entityType: 'expense',
        entityId: transactionId,
        isRead: false,
        priority: 'low',
        actionRequired: false,
        createdAt: new Date(),
        updatedAt: new Date(),
        createdBy: 'user',
        updatedBy: 'user'
      }]);
    } catch (error) {
      console.error('Erro ao pausar recorrência:', error);
      alert('Erro ao pausar recorrência. Tente novamente.');
    }
  };

  const handleResumeRecurrence = async (transactionId: string) => {
    try {
      const transaction = recurrentTransactions.find(t => t.id === transactionId);
      if (!transaction) return;
      
      const updatedTransaction = await financialService.updateRecurrentTransactionStatus(
        transactionId,
        transaction.type,
        'active'
      );
      
      setRecurrentTransactions(prev => 
        prev.map(t => 
          t.id === transactionId ? updatedTransaction : t
        )
      );
      
      // Adicionar notificação de sucesso
      setNotifications(prev => [...prev, {
        id: Date.now().toString(),
        type: 'recurrence_confirmation',
        title: 'Recorrência Retomada',
        message: 'A recorrência foi retomada com sucesso',
        entityType: 'expense',
        entityId: transactionId,
        isRead: false,
        priority: 'low',
        actionRequired: false,
        createdAt: new Date(),
        updatedAt: new Date(),
        createdBy: 'user',
        updatedBy: 'user'
      }]);
    } catch (error) {
      console.error('Erro ao retomar recorrência:', error);
      alert('Erro ao retomar recorrência. Tente novamente.');
    }
  };

  const handleEditRecurrence = (transaction: RecurrentTransaction) => {
    setSelectedTransaction(transaction);
    setFormData({
      description: transaction.description,
      amount: transaction.amount,
      type: transaction.type,
      categoryId: transaction.categoryId,
      paymentMethodId: transaction.paymentMethodId,
      bankAccountId: transaction.bankAccountId || '',
      period: transaction.recurrence.period || 'monthly',
      interval: transaction.recurrence.interval || 1,
      status: transaction.status
    });
    setFormErrors({});
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedTransaction(null);
    setFormData({
      description: '',
      amount: 0,
      type: 'expense',
      categoryId: '',
      paymentMethodId: '',
      bankAccountId: '',
      period: 'monthly',
      interval: 1,
      status: 'active'
    });
    setFormErrors({});
  };

  const validateForm = () => {
    const errors: Record<string, string> = {};
    
    if (!formData.description.trim()) {
      errors.description = 'Descrição é obrigatória';
    }
    if (formData.amount <= 0) {
      errors.amount = 'Valor deve ser maior que zero';
    }
    if (!formData.categoryId) {
      errors.categoryId = 'Categoria é obrigatória';
    }
    if (!formData.paymentMethodId) {
      errors.paymentMethodId = 'Forma de pagamento é obrigatória';
    }
    if (formData.interval < 1) {
      errors.interval = 'Intervalo deve ser maior que zero';
    }
    
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSaveRecurrence = async () => {
    if (!validateForm() || !selectedTransaction) return;
    
    try {
      setLoading(true);
      
      const updatedTransaction = await financialService.updateRecurrentTransaction(
        selectedTransaction.id,
        selectedTransaction.type,
        {
          description: formData.description,
          amount: Number(formData.amount),
          categoryId: formData.categoryId,
          paymentMethodId: formData.paymentMethodId,
          bankAccountId: formData.bankAccountId,
          period: formData.period,
          interval: formData.interval,
          status: formData.status,
          nextDueDate: new Date()
        }
      );

      setRecurrentTransactions(prev => 
        prev.map(transaction => 
          transaction.id === selectedTransaction.id ? updatedTransaction : transaction
        )
      );

      handleCloseModal();
    } catch (error) {
      console.error('Erro ao salvar recorrência:', error);
      alert('Erro ao salvar recorrência. Tente novamente.');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteRecurrence = async () => {
    if (!selectedTransaction) return;
    
    const confirmed = window.confirm(
      `Tem certeza que deseja excluir a recorrência "${selectedTransaction.description}"?`
    );

    if (!confirmed) return;

    try {
      setLoading(true);
      
      await financialService.deleteRecurrentTransaction(
        selectedTransaction.id,
        selectedTransaction.type
      );

      setRecurrentTransactions(prev => 
        prev.filter(transaction => transaction.id !== selectedTransaction.id)
      );
      
      handleCloseModal();
    } catch (error) {
      console.error('Erro ao excluir recorrência:', error);
      alert('Erro ao excluir recorrência. Tente novamente.');
    } finally {
      setLoading(false);
    }
  };

  const calculateNextDueDate = (lastDate: Date, period: RecurrencePeriod, interval: number = 1): Date => {
    const nextDate = new Date(lastDate);
    
    switch (period) {
      case 'daily':
        nextDate.setDate(nextDate.getDate() + interval);
        break;
      case 'weekly':
        nextDate.setDate(nextDate.getDate() + (7 * interval));
        break;
      case 'biweekly':
        nextDate.setDate(nextDate.getDate() + (14 * interval));
        break;
      case 'monthly':
        nextDate.setMonth(nextDate.getMonth() + interval);
        break;
      case 'quarterly':
        nextDate.setMonth(nextDate.getMonth() + (3 * interval));
        break;
      case 'semiannual':
        nextDate.setMonth(nextDate.getMonth() + (6 * interval));
        break;
      case 'annual':
        nextDate.setFullYear(nextDate.getFullYear() + interval);
        break;
    }
    
    return nextDate;
  };

  const getPeriodText = (period: RecurrencePeriod): string => {
    const periods = {
      daily: 'Diário',
      weekly: 'Semanal',
      biweekly: 'Quinzenal',
      monthly: 'Mensal',
      quarterly: 'Trimestral',
      semiannual: 'Semestral',
      annual: 'Anual'
    };
    return periods[period];
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'text-green-600 bg-green-100';
      case 'paused': return 'text-yellow-600 bg-yellow-100';
      case 'completed': return 'text-gray-600 bg-gray-100';
      case 'pending_confirmation': return 'text-blue-600 bg-blue-100';
      case 'confirmed': return 'text-green-600 bg-green-100';
      case 'skipped': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'active': return 'Ativo';
      case 'paused': return 'Pausado';
      case 'completed': return 'Concluído';
      case 'pending_confirmation': return 'Aguardando Confirmação';
      case 'confirmed': return 'Confirmado';
      case 'skipped': return 'Pulado';
      default: return status;
    }
  };

  const filteredTransactions = recurrentTransactions.filter(transaction => {
    const matchesType = filter === 'all' || transaction.type === filter;
    const matchesStatus = statusFilter === 'all' || transaction.status === statusFilter;
    return matchesType && matchesStatus;
  });

  const filteredPendingRecurrences = pendingRecurrences.filter(pending => 
    pending.status === 'pending_confirmation'
  );

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-800">Sistema de Recorrência</h2>
        <div className="flex gap-2">
          <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
            {filteredPendingRecurrences.length} pendentes
          </span>
          <span className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm">
            {recurrentTransactions.filter(t => t.status === 'active').length} ativas
          </span>
        </div>
      </div>

      {/* Notificações */}
      {notifications.filter(n => !n.isRead).length > 0 && (
        <div className="mb-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <h3 className="text-lg font-medium text-yellow-800 mb-2">Notificações</h3>
          {notifications.filter(n => !n.isRead).map(notification => (
            <div key={notification.id} className="flex items-center justify-between py-2">
              <div>
                <p className="text-yellow-800 font-medium">{notification.title}</p>
                <p className="text-yellow-600 text-sm">{notification.message}</p>
              </div>
              <button
                onClick={() => setNotifications(prev => 
                  prev.map(n => n.id === notification.id ? { ...n, isRead: true } : n)
                )}
                className="text-yellow-600 hover:text-yellow-800"
              >
                Marcar como lida
              </button>
            </div>
          ))}
        </div>
      )}

      {/* Recorrências Pendentes */}
      {filteredPendingRecurrences.length > 0 && (
        <div className="mb-6">
          <h3 className="text-lg font-medium text-gray-800 mb-4">Confirmações Pendentes</h3>
          <div className="bg-white rounded-lg shadow overflow-hidden">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Descrição
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Tipo
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Valor
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Data Programada
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Ações
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredPendingRecurrences.map((pending) => (
                  <tr key={pending.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900">{pending.description}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        pending.type === 'revenue' ? 'text-green-600 bg-green-100' : 'text-red-600 bg-red-100'
                      }`}>
                        {pending.type === 'revenue' ? 'Receita' : 'Despesa'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      R$ {pending.amount.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {pending.scheduledDate.toLocaleDateString('pt-BR')}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <button
                        onClick={() => handleConfirmRecurrence(pending.id)}
                        className="text-green-600 hover:text-green-900 mr-3"
                      >
                        Confirmar
                      </button>
                      <button
                        onClick={() => handleSkipRecurrence(pending.id)}
                        className="text-red-600 hover:text-red-900"
                      >
                        Pular
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {/* Filtros */}
      <div className="mb-6 flex gap-4">
        <select
          value={filter}
          onChange={(e) => setFilter(e.target.value as 'all' | 'revenue' | 'expense')}
          className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        >
          <option value="all">Todos os Tipos</option>
          <option value="revenue">Receitas</option>
          <option value="expense">Despesas</option>
        </select>
        <select
          value={statusFilter}
          onChange={(e) => setStatusFilter(e.target.value as 'all' | 'active' | 'paused' | 'completed')}
          className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        >
          <option value="all">Todos os Status</option>
          <option value="active">Ativo</option>
          <option value="paused">Pausado</option>
          <option value="completed">Concluído</option>
        </select>
      </div>

      {/* Lista de Transações Recorrentes */}
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Descrição
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Tipo
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Valor
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Periodicidade
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Próximo Vencimento
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Ações
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {filteredTransactions.map((transaction) => (
              <tr key={transaction.id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm font-medium text-gray-900">{transaction.description}</div>
                  <div className="text-sm text-gray-500">Geradas: {transaction.totalGenerated}</div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                    transaction.type === 'revenue' ? 'text-green-600 bg-green-100' : 'text-red-600 bg-red-100'
                  }`}>
                    {transaction.type === 'revenue' ? 'Receita' : 'Despesa'}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  R$ {transaction.amount.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {getPeriodText(transaction.recurrence.period!)}
                  {transaction.recurrence.interval && transaction.recurrence.interval > 1 && 
                    ` (${transaction.recurrence.interval}x)`
                  }
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {transaction.nextDueDate.toLocaleDateString('pt-BR')}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(transaction.status)}`}>
                    {getStatusText(transaction.status)}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <button
                    onClick={() => handleEditRecurrence(transaction)}
                    className="text-indigo-600 hover:text-indigo-900 mr-3"
                  >
                    Editar
                  </button>
                  {transaction.status === 'active' ? (
                    <button
                      onClick={() => handlePauseRecurrence(transaction.id)}
                      className="text-yellow-600 hover:text-yellow-900"
                    >
                      Pausar
                    </button>
                  ) : transaction.status === 'paused' ? (
                    <button
                      onClick={() => handleResumeRecurrence(transaction.id)}
                      className="text-green-600 hover:text-green-900"
                    >
                      Retomar
                    </button>
                  ) : null}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Modal de Edição */}
      {isModalOpen && selectedTransaction && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <h3 className="text-xl font-semibold text-gray-900">
                Editar Recorrência
              </h3>
              <button
                onClick={handleCloseModal}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <X className="h-6 w-6" />
              </button>
            </div>

            <div className="p-6 space-y-6">
              {/* Tipo */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Tipo *
                </label>
                <select
                  value={formData.type}
                  onChange={(e) => setFormData({ ...formData, type: e.target.value as 'revenue' | 'expense' })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="expense">💸 Despesa</option>
                  <option value="revenue">💰 Receita</option>
                </select>
              </div>

              {/* Descrição */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Descrição *
                </label>
                <input
                  type="text"
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                  className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                    formErrors.description ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Descrição da transação recorrente"
                />
                {formErrors.description && (
                  <div className="flex items-center mt-1 text-red-600">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    <span className="text-sm">{formErrors.description}</span>
                  </div>
                )}
              </div>

              {/* Valor */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <DollarSign className="inline h-4 w-4 mr-1" />
                  Valor *
                </label>
                <input
                  type="number"
                  step="0.01"
                  min="0"
                  value={formData.amount}
                  onChange={(e) => setFormData({ ...formData, amount: parseFloat(e.target.value) || 0 })}
                  className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                    formErrors.amount ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="0,00"
                />
                {formErrors.amount && (
                  <div className="flex items-center mt-1 text-red-600">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    <span className="text-sm">{formErrors.amount}</span>
                  </div>
                )}
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Categoria */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    <Tag className="inline h-4 w-4 mr-1" />
                    Categoria *
                  </label>
                  <select
                    value={formData.categoryId}
                    onChange={(e) => setFormData({ ...formData, categoryId: e.target.value })}
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      formErrors.categoryId ? 'border-red-500' : 'border-gray-300'
                    }`}
                  >
                    <option value="">Selecione uma categoria</option>
                    {categories
                      .filter(cat => cat.type === formData.type || cat.type === 'income')
                      .map(category => (
                        <option key={category.id} value={category.id}>
                          {category.name}
                        </option>
                      ))}
                  </select>
                  {formErrors.categoryId && (
                    <div className="flex items-center mt-1 text-red-600">
                      <AlertCircle className="w-4 h-4 mr-1" />
                      <span className="text-sm">{formErrors.categoryId}</span>
                    </div>
                  )}
                </div>

                {/* Forma de Pagamento */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    <CreditCard className="inline h-4 w-4 mr-1" />
                    Forma de Pagamento *
                  </label>
                  <select
                    value={formData.paymentMethodId}
                    onChange={(e) => setFormData({ ...formData, paymentMethodId: e.target.value })}
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      formErrors.paymentMethodId ? 'border-red-500' : 'border-gray-300'
                    }`}
                  >
                    <option value="">Selecione uma forma</option>
                    {paymentMethods.map(method => (
                      <option key={method.id} value={method.id}>
                        {method.name}
                      </option>
                    ))}
                  </select>
                  {formErrors.paymentMethodId && (
                    <div className="flex items-center mt-1 text-red-600">
                      <AlertCircle className="w-4 h-4 mr-1" />
                      <span className="text-sm">{formErrors.paymentMethodId}</span>
                    </div>
                  )}
                </div>
              </div>

              {/* Conta Bancária */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  <Building2 className="inline h-4 w-4 mr-1" />
                  Conta Bancária
                </label>
                <select
                  value={formData.bankAccountId}
                  onChange={(e) => setFormData({ ...formData, bankAccountId: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="">Selecione uma conta (opcional)</option>
                  {bankAccounts.map(account => (
                    <option key={account.id} value={account.id}>
                      {account.name}
                    </option>
                  ))}
                </select>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Periodicidade */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    <Calendar className="inline h-4 w-4 mr-1" />
                    Periodicidade *
                  </label>
                  <select
                    value={formData.period}
                    onChange={(e) => setFormData({ ...formData, period: e.target.value as RecurrencePeriod })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="daily">Diário</option>
                    <option value="weekly">Semanal</option>
                    <option value="biweekly">Quinzenal</option>
                    <option value="monthly">Mensal</option>
                    <option value="quarterly">Trimestral</option>
                    <option value="semiannual">Semestral</option>
                    <option value="annual">Anual</option>
                  </select>
                </div>

                {/* Intervalo */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Intervalo *
                  </label>
                  <input
                    type="number"
                    min="1"
                    value={formData.interval}
                    onChange={(e) => setFormData({ ...formData, interval: parseInt(e.target.value) || 1 })}
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      formErrors.interval ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="1"
                  />
                  {formErrors.interval && (
                    <div className="flex items-center mt-1 text-red-600">
                      <AlertCircle className="w-4 h-4 mr-1" />
                      <span className="text-sm">{formErrors.interval}</span>
                    </div>
                  )}
                </div>
              </div>

              {/* Status */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Status
                </label>
                <select
                  value={formData.status}
                  onChange={(e) => setFormData({ ...formData, status: e.target.value as 'active' | 'paused' | 'completed' })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="active">Ativo</option>
                  <option value="paused">Pausado</option>
                  <option value="completed">Concluído</option>
                </select>
              </div>
            </div>

            <div className="flex items-center justify-between p-6 border-t border-gray-200 bg-gray-50">
              <button
                onClick={handleDeleteRecurrence}
                className="flex items-center px-4 py-2 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-lg transition-colors"
              >
                <Trash2 className="h-4 w-4 mr-2" />
                Excluir
              </button>
              
              <div className="flex space-x-3">
                <button
                  onClick={handleCloseModal}
                  className="px-4 py-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={handleSaveRecurrence}
                  className="flex items-center px-4 py-2 bg-blue-600 text-white hover:bg-blue-700 rounded-lg transition-colors"
                >
                  <Save className="h-4 w-4 mr-2" />
                  Salvar
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default RecurrenceManager;