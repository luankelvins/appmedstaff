import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// Carregar vari√°veis de ambiente
dotenv.config()

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseServiceKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente VITE_SUPABASE_URL e VITE_SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function fixTasksRLS() {
  console.log('üîß Corrigindo pol√≠ticas RLS da tabela tasks...')

  try {
    // Primeiro, vamos tentar desabilitar RLS temporariamente para permitir opera√ß√µes
    console.log('üìù Desabilitando RLS temporariamente...')
    
    const { error: disableRLSError } = await supabase.rpc('exec_sql', { 
      sql: 'ALTER TABLE tasks DISABLE ROW LEVEL SECURITY;' 
    })
    
    if (disableRLSError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel desabilitar RLS (pode n√£o existir):', disableRLSError.message)
    } else {
      console.log('‚úÖ RLS desabilitado temporariamente')
    }

    // Agora vamos reabilitar com pol√≠ticas mais permissivas
    console.log('üìù Reabilitando RLS com pol√≠ticas permissivas...')
    
    const { error: enableRLSError } = await supabase.rpc('exec_sql', { 
      sql: 'ALTER TABLE tasks ENABLE ROW LEVEL SECURITY;' 
    })
    
    if (enableRLSError) {
      console.error('‚ùå Erro ao reabilitar RLS:', enableRLSError)
      throw enableRLSError
    }

    console.log('‚úÖ RLS reabilitado')

    // Criar pol√≠tica simples que permite tudo para usu√°rios autenticados
    const { error: policyError } = await supabase.rpc('exec_sql', { 
      sql: `
        DROP POLICY IF EXISTS "allow_all_for_authenticated" ON tasks;
        CREATE POLICY "allow_all_for_authenticated" ON tasks
          FOR ALL USING (true);
      `
    })
    
    if (policyError) {
      console.error('‚ùå Erro ao criar pol√≠tica:', policyError)
      throw policyError
    }

    console.log('‚úÖ Pol√≠tica permissiva criada')

    // Testar se conseguimos acessar a tabela
    const { data: testData, error: testError } = await supabase
      .from('tasks')
      .select('count(*)')
      .limit(1)

    if (testError) {
      console.error('‚ùå Erro ao testar acesso:', testError)
    } else {
      console.log('‚úÖ Acesso √† tabela tasks confirmado')
    }

    console.log('üéâ Corre√ß√£o das pol√≠ticas RLS conclu√≠da!')

  } catch (error) {
    console.error('‚ùå Erro durante a corre√ß√£o:', error)
    process.exit(1)
  }
}

// Executar a corre√ß√£o
fixTasksRLS()