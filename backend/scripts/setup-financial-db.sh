#!/bin/bash

# Script para configurar as tabelas financeiras no Supabase
echo "üöÄ Configurando tabelas financeiras no Supabase..."

# Verificar se o Supabase CLI est√° instalado
if ! command -v supabase &> /dev/null; then
    echo "‚ùå Supabase CLI n√£o encontrado. Instalando..."
    npm install -g supabase
fi

# Verificar se as vari√°veis de ambiente est√£o configuradas
if [ -z "$VITE_SUPABASE_URL" ] || [ -z "$VITE_SUPABASE_SERVICE_ROLE_KEY" ]; then
    echo "‚ùå Vari√°veis de ambiente VITE_SUPABASE_URL e VITE_SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias"
    echo "üìã Configure-as no arquivo .env"
    exit 1
fi

# Extrair project ID da URL
PROJECT_ID=$(echo $VITE_SUPABASE_URL | sed 's/.*\/\/\([^.]*\).*/\1/')
echo "üìã Project ID: $PROJECT_ID"

# Executar migra√ß√£o do schema principal
echo "üìÑ Executando migra√ß√£o do schema financeiro..."
supabase db push --project-ref $PROJECT_ID --include-all

# Verificar se a migra√ß√£o foi bem-sucedida
if [ $? -eq 0 ]; then
    echo "‚úÖ Schema financeiro criado com sucesso!"
    
    # Executar dados de exemplo
    echo "üìÑ Inserindo dados de exemplo..."
    supabase db push --project-ref $PROJECT_ID --include-all
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Dados de exemplo inseridos com sucesso!"
        echo ""
        echo "üéâ Configura√ß√£o conclu√≠da!"
        echo "üìã Tabelas criadas:"
        echo "   ‚Ä¢ financial_categories"
        echo "   ‚Ä¢ bank_accounts" 
        echo "   ‚Ä¢ payment_methods"
        echo "   ‚Ä¢ revenues"
        echo "   ‚Ä¢ expenses"
        echo "   ‚Ä¢ financial_change_history"
        echo "   ‚Ä¢ financial_notifications"
        echo "   ‚Ä¢ financial_reports"
        echo "   ‚Ä¢ financial_settings"
    else
        echo "‚ö†Ô∏è  Schema criado, mas houve problemas com os dados de exemplo"
    fi
else
    echo "‚ùå Falha ao criar schema financeiro"
    exit 1
fi

echo ""
echo "üîó Acesse o painel do Supabase para verificar as tabelas:"
echo "   $VITE_SUPABASE_URL"