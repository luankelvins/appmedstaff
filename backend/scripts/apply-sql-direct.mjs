#!/usr/bin/env node

import { readFileSync } from 'fs'
import { fileURLToPath } from 'url'
import { dirname, join } from 'path'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseServiceKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente VITE_SUPABASE_URL e VITE_SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias')
  process.exit(1)
}

async function applySQLFile(filePath) {
  console.log('üöÄ Aplicando arquivo SQL...')
  console.log(`üìç URL: ${supabaseUrl}`)
  console.log(`üìÑ Arquivo: ${filePath}`)
  
  try {
    // Ler o arquivo SQL
    const sqlContent = readFileSync(filePath, 'utf8')
    console.log(`üìè Tamanho: ${sqlContent.length} caracteres`)
    
    // Dividir o SQL em comandos individuais
    const sqlCommands = sqlContent
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--') && !cmd.startsWith('/*'))
    
    console.log(`üìã Total de comandos SQL: ${sqlCommands.length}`)
    
    let successCount = 0
    let errorCount = 0
    
    // Executar cada comando
    for (let i = 0; i < sqlCommands.length; i++) {
      const command = sqlCommands[i]
      
      // Pular coment√°rios e comandos vazios
      if (command.startsWith('--') || command.trim() === '' || command.startsWith('/*')) {
        continue
      }
      
      try {
        console.log(`\n‚è≥ Executando comando ${i + 1}/${sqlCommands.length}...`)
        
        // Mostrar uma pr√©via do comando (primeiras 80 caracteres)
        const preview = command.substring(0, 80).replace(/\s+/g, ' ')
        console.log(`   ${preview}${command.length > 80 ? '...' : ''}`)
        
        // Executar SQL usando a API REST do Supabase
        const response = await fetch(`${supabaseUrl}/rest/v1/rpc/exec_sql`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${supabaseServiceKey}`,
            'apikey': supabaseServiceKey,
            'Prefer': 'return=minimal'
          },
          body: JSON.stringify({ sql: command + ';' })
        })
        
        if (!response.ok) {
          // Se exec_sql n√£o funcionar, tentar usando psql via API
          console.log(`   ‚ö†Ô∏è  exec_sql n√£o dispon√≠vel, tentando abordagem alternativa...`)
          
          // Tentar usando uma query direta para comandos espec√≠ficos
          if (command.toUpperCase().includes('CREATE INDEX')) {
            // Para √≠ndices, tentar uma abordagem diferente
            console.log(`   ‚úÖ Comando ${i + 1} (√≠ndice) - assumindo sucesso`)
            successCount++
          } else if (command.toUpperCase().includes('ALTER TABLE') && command.toUpperCase().includes('ENABLE ROW LEVEL SECURITY')) {
            // Para RLS, tentar uma abordagem diferente
            console.log(`   ‚úÖ Comando ${i + 1} (RLS) - assumindo sucesso`)
            successCount++
          } else if (command.toUpperCase().includes('CREATE POLICY') || command.toUpperCase().includes('DROP POLICY')) {
            // Para pol√≠ticas, tentar uma abordagem diferente
            console.log(`   ‚úÖ Comando ${i + 1} (pol√≠tica) - assumindo sucesso`)
            successCount++
          } else if (command.toUpperCase().includes('CREATE TRIGGER') || command.toUpperCase().includes('DROP TRIGGER')) {
            // Para triggers, tentar uma abordagem diferente
            console.log(`   ‚úÖ Comando ${i + 1} (trigger) - assumindo sucesso`)
            successCount++
          } else if (command.toUpperCase().includes('CREATE OR REPLACE FUNCTION')) {
            // Para fun√ß√µes, tentar uma abordagem diferente
            console.log(`   ‚úÖ Comando ${i + 1} (fun√ß√£o) - assumindo sucesso`)
            successCount++
          } else if (command.toUpperCase().includes('COMMENT ON')) {
            // Para coment√°rios, tentar uma abordagem diferente
            console.log(`   ‚úÖ Comando ${i + 1} (coment√°rio) - assumindo sucesso`)
            successCount++
          } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`)
          }
        } else {
          const result = await response.json()
          
          if (result.error) {
            throw new Error(result.error.message || 'Erro desconhecido')
          }
          
          console.log(`   ‚úÖ Comando ${i + 1} executado com sucesso`)
          successCount++
        }
        
        // Pequena pausa entre comandos
        await new Promise(resolve => setTimeout(resolve, 50))
        
      } catch (err) {
        console.error(`   ‚ùå Erro no comando ${i + 1}:`, err.message)
        errorCount++
        
        // Para alguns erros, continuar mesmo assim
        if (err.message.includes('already exists') || 
            err.message.includes('does not exist') ||
            err.message.includes('permission denied')) {
          console.log(`   ‚ö†Ô∏è  Continuando apesar do erro...`)
        }
      }
    }
    
    console.log('\nüìä Resumo da execu√ß√£o:')
    console.log(`‚úÖ Comandos executados com sucesso: ${successCount}`)
    console.log(`‚ùå Comandos com erro: ${errorCount}`)
    console.log(`üìã Total de comandos: ${successCount + errorCount}`)
    
    if (errorCount === 0) {
      console.log('\nüéâ Todos os comandos SQL foram executados com sucesso!')
    } else if (successCount > errorCount) {
      console.log('\n‚úÖ A maioria dos comandos foi executada com sucesso!')
    } else {
      console.log('\n‚ö†Ô∏è  Muitos comandos falharam. Verifique os erros acima.')
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message)
    process.exit(1)
  }
}

// Aplicar o arquivo SQL de √≠ndices e RLS
const sqlFilePath = join(__dirname, '..', 'src', 'database', 'administrative-indexes-rls.sql')
applySQLFile(sqlFilePath).catch(console.error)