#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js'
import { readFileSync } from 'fs'
import { fileURLToPath } from 'url'
import { dirname, join } from 'path'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// Carregar vari√°veis do .env
try {
  const envPath = join(__dirname, '..', '.env')
  const envContent = readFileSync(envPath, 'utf8')
  const envLines = envContent.split('\n')
  
  envLines.forEach(line => {
    const [key, value] = line.split('=')
    if (key && value) {
      process.env[key.trim()] = value.trim()
    }
  })
} catch (error) {
  console.log('‚ö†Ô∏è  N√£o foi poss√≠vel carregar .env:', error.message)
}

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseServiceKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function testPasswordReset() {
  try {
    console.log('üß™ Testando sistema de recupera√ß√£o de senha...')

    // 1. Verificar se a tabela existe
    console.log('1Ô∏è‚É£ Verificando tabela password_reset_tokens...')
    const { data: tableData, error: tableError } = await supabase
      .from('password_reset_tokens')
      .select('id')
      .limit(1)

    if (tableError) {
      console.error('‚ùå Tabela password_reset_tokens n√£o existe:', tableError.message)
      console.log('üìã Execute o schema no Supabase SQL Editor:')
      console.log('   database/password_reset_schema.sql')
      return
    }

    console.log('‚úÖ Tabela password_reset_tokens existe')

    // 2. Verificar se h√° usu√°rios na tabela profiles
    console.log('2Ô∏è‚É£ Verificando usu√°rios na tabela profiles...')
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id, email, name')
      .limit(5)

    if (profilesError) {
      console.error('‚ùå Erro ao buscar profiles:', profilesError.message)
      return
    }

    console.log('‚úÖ Profiles encontrados:', profiles.length)
    profiles.forEach(p => console.log(`   - ${p.email} (${p.name})`))

    // 3. Testar inser√ß√£o de token
    console.log('3Ô∏è‚É£ Testando inser√ß√£o de token...')
    const testUserId = profiles[0]?.id
    if (!testUserId) {
      console.error('‚ùå Nenhum usu√°rio encontrado para teste')
      return
    }

    const testToken = `test-token-${Date.now()}`
    const { data: insertData, error: insertError } = await supabase
      .from('password_reset_tokens')
      .insert({
        user_id: testUserId,
        token: testToken,
        email: profiles[0].email,
        expires_at: new Date(Date.now() + 60 * 60 * 1000).toISOString()
      })
      .select()

    if (insertError) {
      console.error('‚ùå Erro ao inserir token:', insertError.message)
      return
    }

    console.log('‚úÖ Token inserido com sucesso:', insertData[0].id)

    // 4. Limpar token de teste
    console.log('4Ô∏è‚É£ Limpando token de teste...')
    await supabase
      .from('password_reset_tokens')
      .delete()
      .eq('token', testToken)

    console.log('‚úÖ Token de teste removido')

    // 5. Verificar vari√°veis de ambiente
    console.log('5Ô∏è‚É£ Verificando vari√°veis de ambiente...')
    console.log('   VITE_SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå')
    console.log('   VITE_SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ' : '‚ùå')
    console.log('   VITE_RESEND_API_KEY:', process.env.VITE_RESEND_API_KEY ? '‚úÖ' : '‚ùå')

    console.log('\nüéâ Sistema de recupera√ß√£o de senha est√° funcionando!')
    console.log('üìß Configure VITE_RESEND_API_KEY para testar envio de emails')

  } catch (error) {
    console.error('‚ùå Erro geral:', error)
  }
}

testPasswordReset()
