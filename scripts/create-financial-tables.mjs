import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY s√£o obrigat√≥rias');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function setupFinancialData() {
  console.log('üöÄ Configurando dados financeiros no Supabase...\n');

  try {
    // 1. Inserir categorias financeiras de exemplo
    console.log('üìã Inserindo categorias financeiras...');
    
    const { data: existingCategories } = await supabase
      .from('financial_categories')
      .select('name');

    if (!existingCategories || existingCategories.length === 0) {
      const { error: categoriesError } = await supabase
        .from('financial_categories')
        .insert([
          { 
            name: 'Vendas', 
            type: 'income', 
            color: '#10b981', 
            icon: 'TrendingUp',
            description: 'Receitas de vendas de produtos e servi√ßos'
          },
          { 
            name: 'Servi√ßos', 
            type: 'income', 
            color: '#3b82f6', 
            icon: 'Briefcase',
            description: 'Receitas de presta√ß√£o de servi√ßos'
          },
          { 
            name: 'Escrit√≥rio', 
            type: 'expense', 
            color: '#ef4444', 
            icon: 'Building',
            description: 'Despesas com aluguel, energia, internet'
          },
          { 
            name: 'Marketing', 
            type: 'expense', 
            color: '#f59e0b', 
            icon: 'Megaphone',
            description: 'Despesas com publicidade e marketing'
          },
          { 
            name: 'Pessoal', 
            type: 'expense', 
            color: '#8b5cf6', 
            icon: 'Users',
            description: 'Sal√°rios, benef√≠cios e encargos'
          }
        ]);

      if (categoriesError) {
        console.error('‚ùå Erro ao inserir categorias:', categoriesError.message);
      } else {
        console.log('‚úÖ Categorias financeiras inseridas');
      }
    } else {
      console.log('‚úÖ Categorias financeiras j√° existem');
    }

    // 2. Inserir contas banc√°rias de exemplo
    console.log('üìã Inserindo contas banc√°rias...');
    
    const { data: existingAccounts } = await supabase
      .from('bank_accounts')
      .select('name');

    if (!existingAccounts || existingAccounts.length === 0) {
      const { error: accountsError } = await supabase
        .from('bank_accounts')
        .insert([
          {
            name: 'Conta Principal',
            bank: 'Banco do Brasil',
            account_number: '12345-6',
            agency: '1234',
            account_type: 'checking',
            balance: 50000.00,
            description: 'Conta corrente principal da empresa'
          },
          {
            name: 'Conta Poupan√ßa',
            bank: 'Caixa Econ√¥mica Federal',
            account_number: '98765-4',
            agency: '5678',
            account_type: 'savings',
            balance: 25000.00,
            description: 'Conta poupan√ßa para reserva de emerg√™ncia'
          }
        ]);

      if (accountsError) {
        console.error('‚ùå Erro ao inserir contas banc√°rias:', accountsError.message);
      } else {
        console.log('‚úÖ Contas banc√°rias inseridas');
      }
    } else {
      console.log('‚úÖ Contas banc√°rias j√° existem');
    }

    // 3. Inserir m√©todos de pagamento de exemplo
    console.log('üìã Inserindo m√©todos de pagamento...');
    
    const { data: existingPaymentMethods } = await supabase
      .from('payment_methods')
      .select('name');

    if (!existingPaymentMethods || existingPaymentMethods.length === 0) {
      const { error: paymentMethodsError } = await supabase
        .from('payment_methods')
        .insert([
          {
            name: 'Dinheiro',
            type: 'cash',
            description: 'Pagamentos em dinheiro'
          },
          {
            name: 'PIX',
            type: 'pix',
            description: 'Transfer√™ncias via PIX'
          },
          {
            name: 'Cart√£o de Cr√©dito',
            type: 'credit_card',
            description: 'Pagamentos com cart√£o de cr√©dito'
          },
          {
            name: 'Transfer√™ncia Banc√°ria',
            type: 'bank_transfer',
            description: 'Transfer√™ncias banc√°rias'
          }
        ]);

      if (paymentMethodsError) {
        console.error('‚ùå Erro ao inserir m√©todos de pagamento:', paymentMethodsError.message);
      } else {
        console.log('‚úÖ M√©todos de pagamento inseridos');
      }
    } else {
      console.log('‚úÖ M√©todos de pagamento j√° existem');
    }

    console.log('\nüéâ Configura√ß√£o de dados financeiros conclu√≠da!');
    console.log('\nüìä Resumo:');
    console.log('   ‚Ä¢ Categorias financeiras configuradas');
    console.log('   ‚Ä¢ Contas banc√°rias configuradas');
    console.log('   ‚Ä¢ M√©todos de pagamento configurados');
    console.log('\nüí° Agora voc√™ pode come√ßar a usar o sistema financeiro!');

  } catch (error) {
    console.error('\nüí• Erro durante a configura√ß√£o:', error.message);
    process.exit(1);
  }
}

// Executar a configura√ß√£o
setupFinancialData();